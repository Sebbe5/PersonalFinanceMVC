@model PersonalFinanceMVC.Views.Investment.CreateInvestmentVM

@{
    ViewData["Title"] = "Create Investment";
    Layout = "_FunctionPage";
}
<div class="container bg-white rounded">
    <h1>Create Investment</h1>
    <div class="row">
        <div class="col-md-4">
            <form asp-action="CreateInvestment" id="create-form">
                <partial name="_InvestmentInput" model="@(new _InvestmentInputVM{ Name = "Name", InputType = "text", Title = "Investment Name"})" />
                <partial name="_InvestmentInput" model="@(new _InvestmentInputVM{ Name = "InitialValue", InputType = "number", Title = "Initial Amount"})" />
                <partial name="_InvestmentInput" model="@(new _InvestmentInputVM{ Name = "MonthlyContribution", InputType = "number", Title = "Monthly Contribution"})" />
                <partial name="_InvestmentInput" model="@(new _InvestmentInputVM{ Name = "AnnualInterest", InputType = "text", Title = "Expected Annual Interest (%)"})" />
            </form>
        </div>
    </div>
    <div class="d-flex justify-content-between align-items-center mt-3">
        <input type="submit" form="create-form" value="Create" class="btn btn-primary" />
        <a asp-action="Investments" class="text-decoration-none">Cancel</a>
    </div>
</div>

@section EndoFBody{
    <script>
        // Function to ensure that there is always a value in the amount input fields
        function ensureValue(input) {
            // Check if the input value is empty
            if (input.value === '') {
                // If it is empty, set its value to 0
                input.value = '0';
            }
            else {
                // If it is not empty, parse the input value to a number
                // and set it back as the input value to remove leading 0
                input.value = parseInt(input.value, 10);
            }
        }
    </script>
}
                    