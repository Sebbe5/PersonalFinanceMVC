@model InvestmentDetailsVM

@{
    Layout = "_FunctionPage";
}

<div class="container bg-white rounded py-3">
    <div>
        <div class="row">
            <h2 class="col-md-6">"@Model.Name" Details</h2>
            <div class="col-md-6 d-flex justify-content-md-end align-items-center">
                <a asp-action="EditInvestment" asp-route-id="@Model.Id" class="btn btn-warning">Edit</a>
                <a asp-action="Investments" class="text-decoration-none ms-2">Cancel</a>
            </div>
        </div>
        <hr class="my-1" />
        <div class="row my-4">
            <div class="col-xxl-4 d-flex flex-column justify-content-xxl-center">
                <p><strong>Initial Value: </strong>@Model.InitialValue.ToString("C")</p>
                <p><strong>Recurring Deposit: </strong>@Model.RecurringDeposit.ToString("C")</p>
                <p><strong>Expected Annual Interest: </strong>@Model.ExpectedAnnualInterest %</p>
                <p><strong>Expected Years Invested: </strong>@Model.ExpectedYearsInvested</p>
            </div>
            <div class="col-xxl-8 chart-container">
                <canvas style="height: 100%" id="myChart"></canvas>
            </div>
        </div>
    </div>

    <hr />
    <h3>Prediction for the next @Model.ExpectedYearsInvested years:</h3>
    <table class="table table-striped">
        <thead>
            <tr>
                <th class="w-25">Year</th>
                <th class="w-25">Total Contribution</th>
                <th class="w-25">Total Profits</th>
                <th class="w-25">Total Amount</th>
            </tr>
        </thead>
        <tbody>
            @for (int i = 0; i < Model.ExpectedYearsInvested; i++)
            {
                <tr>
                    <td>@(i + 1)</td>
                    <td>@Model.Contributions[i].ToString("C")</td>
                    <td>@Model.Profits[i].ToString("C")</td>
                    <td>@Model.TotalAmounts[i].ToString("C")</td>
                </tr>
            }
        </tbody>
    </table>
</div>
@section EndOfBody{
    <script src="https://cdn.jsdelivr.net/npm/chart.js@2.9.4"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            console.log(@Html.Raw(Json.Serialize(Model.TotalAmounts.Select(n => Math.Round(n)).ToArray())))
            var ctx = document.getElementById('myChart').getContext('2d');
            var myChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: @Html.Raw(Json.Serialize(Model.YearLabels)),
                    datasets: [{
                        label: 'Total Amount',
                        data: @Html.Raw(Json.Serialize(Model.TotalAmounts.Select(n => Math.Round(n)).ToArray())),
                        borderColor:
                            'rgba(54, 162, 235, 0.7)',
                        backgroundColor:
                            'rgba(54, 162, 235, 0.7)',
                        fill: false
                    },
                    {
                        label: 'Contribution',
                        data: @Html.Raw(Json.Serialize(Model.Contributions.Select(n => Math.Round(n)).ToArray())),
                        borderColor:
                            'rgba(255, 159, 64, 0.7)',
                        backgroundColor:
                            'rgba(255, 159, 64, 0.7)',
                        fill: false
                    },
                    {
                        label: 'Profit',
                        data: @Html.Raw(Json.Serialize(Model.Profits.Select(n => Math.Round(n)).ToArray())),
                        borderColor:
                            'rgba(60, 179, 113, 0.7)',
                        backgroundColor:
                            'rgba(60, 179, 113, 0.7)',
                        fill: false
                    }]
                },
                options: {
                    maintainAspectRatio: false, // Disable maintaining aspect ratio

                }
            });
        });
    </script>
}