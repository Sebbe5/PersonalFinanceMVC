@model TodoListVM

@{
    ViewData["Title"] = "Todo List";
    Layout = "_FunctionPage";
}

<div class="container mt-4 bg-white rounded">
    <h1 class="through">TODO's</h1>
    <div class="container">
        <form asp-controller="Todo" asp-action="Create">
            <div class="row">
                <div class="form-floating mb-2 mb-lg-0 col-lg-4">
                    <input asp-for="NewTodoItem" class="form-control" autofocus />
                    <label asp-for="NewTodoItem"></label>
                    <span asp-validation-for="NewTodoItem" class="text-danger"></span>
                    <span class="text-danger">@TempData["Message"]</span>
                </div>
                <div class="form-floating mb-2 mb-lg-0 col-lg-4">
                    <input asp-for="NewDeadline" class="form-control" asp-format="{0:yyyy-MM-dd HH:mm}" />
                    <label asp-for="NewDeadline"></label>
                    <span asp-validation-for="NewDeadline" class="text-danger"></span>
                </div>
                <div class="form-floating mb-2 mb-lg-0 col-lg-4">
                    <select asp-for="NewCategory" class="form-select">
                        <option value="">Select a category</option>
                        <option value="Work">Work</option>
                        <option value="Personal">Personal</option>
                        <option value="Other">Other</option>
                    </select>
                    <label asp-for="NewCategory"></label>
                </div>
            </div>
            <button type="submit" class="btn btn-primary mt-2">Add</button>
        </form>
    </div>
    <div class="container mt-5">
        <div class="row justify-content-between m-0">
            <button class="btn btn-warning col-md-3 col-5" id="sort-name-button">Sort name by <strong>ascending</strong></button>
            <button class="btn btn-warning col-md-3 col-5" id="sort-date-button">Sort date by <strong>ascending</strong></button>
        </div>
        <div class="row kanban-container">
            <div class="col-lg-4 my-2">
                <div class="status-card card">
                    <p class="ms-2 mt-1">TO DO</p>
                    <div class="sortable-container" data-status="ToDo">
                        @foreach (var item in Model.Todos)
                        {
                            <partial name="_TodoItem" model="@item" />
                        }
                    </div>
                </div>
            </div>
            <div class="col-lg-4 my-2">
                <div class="status-card card">
                    <p class="ms-2 mt-1">IN PROGRESS</p>
                    <div class="sortable-container" data-status="InProgress">
                        @foreach (var item in Model.InProgress)
                        {
                            <partial name="_TodoItem" model="@item"/>
                        }
                    </div>
                </div>
            </div>
            <div class="col-lg-4 my-2">
                <div class="status-card card">
                    <p class="ms-2 mt-1">DONE</p>
                    <div class="sortable-container" data-status="Done">
                        @foreach (var item in Model.Done)
                        {
                            <partial name="_TodoItem" model="@item" />
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section EndOfBody{
    <script>
        function subForm(sortOrder) {
            // Get a reference to the form element by its name
            const form = document.forms["sortForm"];

            // Create a new FormData object from the form element
            const formData = new FormData(form);

            // Set the value of the sort order input element using the set() method of the FormData object
            // The first parameter is the name of the input element, and the second parameter is the value you want to set
            formData.set("sortOrder", sortOrder);

            // Send an HTTP request to the server using the fetch() method
            fetch(form.action, {
                // Specify the HTTP method and request body in the options object
                method: form.method,
                body: formData
            }).then(response => {
                // Handle the response from the server
                if (response.ok) {
                    // If the response is successful, reload the page
                    window.location.reload();
                } else {
                    // If the response is not successful, log an error message to the console
                    console.error('Error submitting form');
                }
            });
        }

        $(function () {

            $('.sortable-container').sortable({
                connectWith: '.sortable-container',
                update: function (event, ui) {
                    var issue = $(ui.item);
                    var newStatus = issue.parent().data('status');
                    var issueId = issue.data('id');

                    // Use Ajax to update the issue's status property
                    $.ajax({
                        type: 'POST',
                        url: '/updateStatus',
                        data: {
                            id: issueId,
                            status: newStatus
                        }
                    });
                },
                appendTo: 'body',
            });
        });

        $(function () {
            // Set the initial sorting order to ascending.
            var sorted = true;

            // Attach a click event handler to the "Sort" button.
            $("#sort-name-button").on("click", function () {
                // Get all the containers with the class "sortable-container". Each container represents a status column.
                var containers = $(".sortable-container");

                // Iterate over each container.
                containers.each(function () {
                    // Get all the items within the current container.
                    var items = $(this).find(".issue");

                    // Sort the items based on the text content of their first <p> element.
                    items.sort(function (a, b) {
                        // Get the text content of the first <p> element of the first item.
                        var textA = $(a).find("p:first-child").text().toUpperCase();
                        // Get the text content of the first <p> element of the second item.
                        var textB = $(b).find("p:first-child").text().toUpperCase();

                        // Determine the sort order based on the current sorting order.
                        var sortOrder;
                        if (sorted) {
                            // If the current sorting order is ascending, set the sort order to 1 (ascending).
                            sortOrder = 1;

                            // Change the value of the button
                            $("#sort-name-button")[0].innerHTML = "Sort name by <strong>descending</strong>";
                        } else {
                            // If the current sorting order is descending, set the sort order to -1 (descending).
                            sortOrder = -1;

                            // Change the value of the button
                            $("#sort-name-button")[0].innerHTML = "Sort name by <strong>ascending</strong>";
                        }

                        // Compare the two text values and return the appropriate value (-1, 0, or 1) based on their relative order.
                        var result;
                        if (textA < textB) {
                            result = -1;
                        } else if (textA > textB) {
                            result = 1;
                        } else {
                            result = 0;
                        }

                        // Multiply the result by the sort order to get the final sort order.
                        return sortOrder * result;
                        // Append the sorted items back to the current container.
                    }).appendTo($(this));
                });

                // Toggle the value of the sorted variable to indicate the current sorting order.
                sorted = !sorted;
            });
        });

        $(function () {
            // Set the initial sorting order to ascending.
            var sorted = true;

            // Attach a click event handler to the "Sort" button.
            $("#sort-date-button").on("click", function () {
                // Get all the containers with the class "sortable-container". Each container represents a status column.
                var containers = $(".sortable-container");

                // Iterate over each container.
                containers.each(function () {
                    // Get all the items within the current container.
                    var items = $(this).find(".issue");

                    // Sort the items based on the text content of their first <p> element.
                    items.sort(function (a, b) {
                        // Get the text content of the first <p> element of the first item.
                        var textA = $(a).find("p:last-child").text().toUpperCase();
                        // Get the text content of the first <p> element of the second item.
                        var textB = $(b).find("p:last-child").text().toUpperCase();

                        // Determine the sort order based on the current sorting order.
                        var sortOrder;
                        if (sorted) {
                            // If the current sorting order is ascending, set the sort order to 1 (ascending).
                            sortOrder = 1;

                            // Change the value of the button
                            $("#sort-date-button")[0].innerHTML = "Sort date by <strong>descending</strong>";
                        } else {
                            // If the current sorting order is descending, set the sort order to -1 (descending).
                            sortOrder = -1;

                            // Change the value of the button
                            $("#sort-date-button")[0].innerHTML = "Sort date by <strong>ascending</strong>";
                        }

                        // Compare the two text values and return the appropriate value (-1, 0, or 1) based on their relative order.
                        var result;
                        if (textA < textB) {
                            result = -1;
                        } else if (textA > textB) {
                            result = 1;
                        } else {
                            result = 0;
                        }

                        // Multiply the result by the sort order to get the final sort order.
                        return sortOrder * result;
                        // Append the sorted items back to the current container.
                    }).appendTo($(this));
                });

                // Toggle the value of the sorted variable to indicate the current sorting order.
                sorted = !sorted;
            });
        });




    </script>

    }
