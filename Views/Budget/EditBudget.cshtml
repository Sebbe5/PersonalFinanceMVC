@model EditBudgetVM

@{
    ViewData["Title"] = "EditBudget";
}

<div class="container mt-4 bg-white rounded">
    <h1>Edit Budget</h1>

    <form asp-action="Edit" onkeydown="return checkEnterKey(event)">
        <div>
            <label asp-for="Name">Budget Name:</label>
            <input asp-for="Name" class="form-control" />
            <span asp-validation-for="Name" class="text-danger"></span>
        </div>

        <div>
            <label>Expenses:</label>

            <table class="table" id="expenseTable">
                <thead>
                    <tr>
                        <th>Expense Name</th>
                        <th>Amount</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @if (Model.Expenses != null && Model.Expenses.Count > 0)
                    {
                        for (int i = 0; i < Model.Expenses.Count; i++)
                        {
                            <tr>
                                <td>
                                    <input type="text" name="Expenses[@i].Name" class="form-control" value="@Model.Expenses[i].Name" />
                                </td>
                                <td>
                                    <input type="number" name="Expenses[@i].Amount" class="form-control" value="@Model.Expenses[i].Amount" oninput="ensureValue(this)" />
                                </td>
                                <td>
                                    <button type="button" class="btn btn-danger" onclick="removeExpense(this)">Remove</button>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
            <div class="d-flex justify-content-between">
                <div>
                    <button type="button" class="btn btn-success" onclick="addExpense()">Add Expense</button>
                </div>
                <div>
                    <a asp-action="Budgets" class="btn btn-secondary">Cancel</a>
                </div>
            </div>
        </div>

        <div class="d-flex justify-content-center">
            <button type="submit" class="btn btn-primary my-2 w-50 mx-auto">Update</button>
        </div>
    </form>
</div>

@section EndOfBody {
    <script>
        var amountOfExpenses = @(Model.Expenses != null ? @Model.Expenses.Count : 0);
        var table = document.getElementById("expenseTable");


        // Add event listener for form's keydown event
        function checkEnterKey(event) {
            if (event.keyCode === 13) {
                event.preventDefault();
                addExpense();
                return false;
            }
            return true;
        }

        // Function to add a new row for expenses
        function addExpense() {
            var tbody = table.tBodies[0]; // Use tBodies[0] to select the first tbody element
            var row = document.createElement("tr"); // Create a new row
            row.innerHTML = `
                                                                                <td>
                                                                                    <input type="text" name="Expenses[${amountOfExpenses}].Name" class="form-control" />
                                                                                </td>
                                                                                <td>
                                                                                    <input type="number" name="Expenses[${amountOfExpenses}].Amount" class="form-control" value="0" oninput="ensureValue(this)"/>
                                                                                </td>
                                                                                <td>
                                                                                    <button type="button" class="btn btn-danger" onclick="removeExpense(this)">Remove</button>
                                                                                </td>
                                                                            `;

            tbody.appendChild(row); // Append the row to the tbody element
            amountOfExpenses++;

            // Set focus on the most recently added expense name input (note that row represents the most recently created row until the function is finished)
            row.getElementsByTagName("input")[0].focus();
        }

        // Function to remove a row for expenses
        function removeExpense(rowToRemove) {
            var row = rowToRemove.parentNode.parentNode; // Get the parent of the parent of rowToRemove argument
            table.tBodies[0].removeChild(row);
            amountOfExpenses--;

            // Update indices for remaining expenses since the order most likely is off when element is deleted
            var rows = table.tBodies[0].getElementsByTagName("tr");
            for (var i = 0; i < rows.length; i++) {
                rows[i].getElementsByTagName("input")[0].setAttribute("name", `Expenses[${i}].Name`);
                rows[i].getElementsByTagName("input")[1].setAttribute("name", `Expenses[${i}].Amount`);
            }
        }

        // Function to ensure that there is always a value in the amount input fields
        function ensureValue(input) {
            // Check if the input value is empty
            if (input.value === '') {
                // If it is empty, set its value to 0
                input.value = '0';
            }
            else {
                // If it is not empty, parse the input value to a number
                // and set it back as the input value to remove leading 0
                input.value = parseInt(input.value, 10);
            }
        }
    </script>
    }

